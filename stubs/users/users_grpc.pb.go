// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: protos/users.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Users_Ping_FullMethodName = "/users.Users/Ping"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	Ping(ctx context.Context, opts ...grpc.CallOption) (Users_PingClient, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) Ping(ctx context.Context, opts ...grpc.CallOption) (Users_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Users_ServiceDesc.Streams[0], Users_Ping_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &usersPingClient{stream}
	return x, nil
}

type Users_PingClient interface {
	Send(*PingDTO) error
	Recv() (*ApiResponse, error)
	grpc.ClientStream
}

type usersPingClient struct {
	grpc.ClientStream
}

func (x *usersPingClient) Send(m *PingDTO) error {
	return x.ClientStream.SendMsg(m)
}

func (x *usersPingClient) Recv() (*ApiResponse, error) {
	m := new(ApiResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	Ping(Users_PingServer) error
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) Ping(Users_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UsersServer).Ping(&usersPingServer{stream})
}

type Users_PingServer interface {
	Send(*ApiResponse) error
	Recv() (*PingDTO, error)
	grpc.ServerStream
}

type usersPingServer struct {
	grpc.ServerStream
}

func (x *usersPingServer) Send(m *ApiResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *usersPingServer) Recv() (*PingDTO, error) {
	m := new(PingDTO)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.Users",
	HandlerType: (*UsersServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Users_Ping_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/users.proto",
}
